Test the matrix_mul function with valid inputs and requirements
>>> from __main__ import matrix_mul
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]

Check if it raises exceptions for invalid inputs
>>> matrix_mul(5, [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

>>> matrix_mul([[1, 2], [3, 4]], "string")
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

>>> matrix_mul([], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [[]])
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

>>> matrix_mul([[1, "a"], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2, 3], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied
